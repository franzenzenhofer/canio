// Generated by CoffeeScript 1.3.1
(function() {
  var binarize, byArray, byImage, canio, clamp, copy, dlog, fff, flip, getToolbox, ifw, make, makeIfw, mirror, mosaic, nb, newToolbox, rotateLeft, rotateRight, toArray, toImage, _DEBUG_,
    __slice = [].slice;

  _DEBUG_ = true;

  canio = {};

  dlog = function(msg) {
    if (_DEBUG_) {
      return console.log(msg);
    }
  };

  nb = function() {
    var cb, p;
    cb = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (cb) {
      window.setTimeout.apply(window, [cb, 0].concat(__slice.call(p)));
    }
    return p[0];
  };

  fff = function() {
    var defaults, first_func, i, p2, params;
    params = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    first_func = null;
    p2 = [];
    i = 0;
    while (i < params.length || i < defaults.length) {
      if (typeof params[i] === 'function' && !first_func) {
        first_func = x;
      } else {
        if (params[i] !== null && params[i] !== void 0) {
          p2.push(x);
        } else {
          p2.push(defaults[i]);
        }
      }
    }
    if (!first_func) {
      throw {
        name: "NoCallbackGiven",
        message: "This function needs a callback to work properly"
      };
      return false;
    } else {
      return p2.unshift(first_func);
    }
  };

  clamp = function(v, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 255;
    }
    return Math.min(max, Math.max(min, v));
  };

  getToolbox = function(c) {
    var ctx, img_data;
    return [ctx = c.getContext('2d'), img_data = ctx.getImageData(0, 0, c.width, c.height), img_data.data];
  };

  canio.make = make = function(width, height) {
    var c, element;
    if (width == null) {
      width = 800;
    }
    if (height == null) {
      height = 600;
    }
    if (width.width && width.height) {
      element = width;
      width = element.width;
      height = element.height;
    }
    c = document.createElement('canvas');
    c.width = width;
    c.height = height;
    return c;
  };

  canio.newToolbox = newToolbox = function(width, height) {
    return getToolbox(make(width, height));
  };

  canio.copy = copy = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    ctx.drawImage(c, 0, 0, c.width, c.height);
    return nb(cb, new_c);
  };

  canio.byImage = byImage = function(img, cb) {
    if (img.width && img.height) {
      return copy(img, cb);
    } else {
      img.onload(function() {
        return byImage(img, cb);
      });
      return false;
    }
  };

  canio.byArray = byArray = function(a, w, h, cb) {
    var c, ctx, i, imgd, px, _ref;
    _ref = newToolbox(w, h), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    i = 0;
    while (i < px.length) {
      cx[i] = a[i];
      i = i + 1;
    }
    ctx.putImageData(img, 0, 0);
    return nb(cb, c);
  };

  canio.toImage = toImage = function(c, cb) {
    var img;
    img = new Image();
    img.src = c.toDataURL("image/png", "");
    return nb(cb, img);
  };

  canio.toArray = toArray = function(c, cb) {
    var a, ctx, i, imgd, px, _ref;
    a = [];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    if (Uint8Array) {
      a = new Uint8Array(new ArrayBuffer(px.length));
    }
    i = 0;
    while (i < px.length) {
      a[i] = px[i];
      i = i + 1;
    }
    return a;
  };

  canio.rotateRight = rotateRight = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(90 * Math.PI / 180);
    new_ctx.drawImage(c, 0, c.height * -1);
    return nb(cb, c);
  };

  canio.rotateLeft = rotateLeft = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(-90 * Math.PI / 180);
    new_ctx.drawImage(c, c.width * -1, 0);
    return nb(cb, c);
  };

  canio.flip = flip = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(Math.PI);
    new_ctx.drawImage(c, c.width * -1, c.height * -1);
    return nb(cb, c);
  };

  canio.mirror = mirror = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.translate(c2.width / 2, 0);
    new_ctx.scale(-1, 1);
    new_ctx.drawImage(c, (c2.width / 2) * -1, 0);
    return nb(cb, c);
  };

  ifw = function() {
    var c, cb, ctx, image_filters_func, imgd, new_c, new_ctx, new_imgd, new_px, p, px, _ref, _ref1;
    c = arguments[0], cb = arguments[1], image_filters_func = arguments[2], p = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    _ref1 = newToolbox(c), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_px = _ref1[3];
    nb(function() {
      return new_ctx.putImageData(image_filters_func.apply(null, [imgd].concat(__slice.call(p))), 0, 0);
    });
    return nb(cb, new_c);
  };

  makeIfw = function() {
    var image_filters_func, p;
    image_filters_func = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function() {
      return ifw.apply(null, [c, cb, image_filters_func].concat(__slice.call(p)));
    };
  };

  canio.binarize = binarize = function() {
    var c, cb, p, threshold, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0.5), cb = _ref[0], threshold = _ref[1];
    return makeIfw(ImageFilters.Binarize, threshold);
  };

  canio.mosaic = mosaic = function() {
    var blockSize, c, cb, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 10), cb = _ref[0], blockSize = _ref[1];
    return makeIfw(ImageFilters.Mosaic, blockSize);
  };

}).call(this);
