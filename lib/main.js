// Generated by CoffeeScript 1.3.1
(function() {
  var Canio, byArray, byImage, clamp, copy, dlog, fff, flip, getToolbox, ifw, invert, mF, make, mirror, mosaic, nb, newToolbox, resize, rotateLeft, rotateRight, scale, toArray, toImage, _DEBUG_,
    __slice = [].slice;

  Canio = {};

  Canio._DEBUG_ = _DEBUG_ = true;

  dlog = function(msg) {
    if (_DEBUG_) {
      return console.log(msg);
    }
  };

  nb = function() {
    var cb, p;
    cb = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (cb && typeof cb === 'function') {
      window.setTimeout.apply(window, [cb, 0].concat(__slice.call(p)));
    }
    return p != null ? p[0] : void 0;
  };

  fff = function(params, defaults) {
    var first_func, i, p2;
    first_func = null;
    p2 = [];
    i = 0;
    while (i < params.length || i < defaults.length) {
      console.log(i);
      if (typeof params[i] === 'function' && !first_func) {
        first_func = params[i];
      } else {
        if (params[i] !== null && params[i] !== void 0) {
          p2.push(params[i]);
        } else {
          p2.push(defaults[i]);
        }
      }
      i = i + 1;
    }
    if (!first_func) {
      throw {
        name: "NoCallbackGiven",
        message: "This function needs a callback to work properly"
      };
      return false;
    } else {
      p2.unshift(first_func);
      dlog(p2);
      return p2;
    }
  };

  clamp = function(v, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 255;
    }
    return Math.min(max, Math.max(min, v));
  };

  Canio.getToolbox = getToolbox = function(c) {
    var ctx, img_data;
    return [c, ctx = c.getContext('2d'), img_data = ctx.getImageData(0, 0, c.width, c.height), img_data.data];
  };

  Canio.make = make = function(width, height, origin) {
    var c, element;
    if (width == null) {
      width = 800;
    }
    if (height == null) {
      height = 600;
    }
    if (width.width && width.height) {
      element = width;
      width = element.width;
      height = element.height;
      origin = (element != null ? typeof element.getAttribute === "function" ? element.getAttribute('id') : void 0 : void 0) || (element != null ? typeof element.getAttribute === "function" ? element.getAttribute('origin') : void 0 : void 0);
    }
    c = document.createElement('canvas');
    c.width = width;
    c.height = height;
    if (origin) {
      c.setAttribute('origin', origin);
    }
    return c;
  };

  Canio.newToolbox = newToolbox = function(width, height, origin) {
    return getToolbox(make(width, height, origin));
  };

  Canio.copy = copy = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.drawImage(c, 0, 0, c.width, c.height);
    return nb(cb, new_c);
  };

  Canio.byImage = byImage = function(img, cb) {
    if (img.width && img.height) {
      return copy(img, cb);
    } else {
      img.onload(function() {
        return byImage(img, cb);
      });
      return false;
    }
  };

  Canio.byArray = byArray = function(a, w, h, cb) {
    var c, ctx, i, imgd, px, _ref;
    _ref = newToolbox(w, h), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    i = 0;
    while (i < px.length) {
      cx[i] = a[i];
      i = i + 1;
    }
    ctx.putImageData(img, 0, 0);
    return nb(cb, c);
  };

  Canio.toImage = toImage = function(c, cb) {
    var img;
    img = new Image();
    img.src = c.toDataURL("image/png", "");
    return nb(cb, img);
  };

  Canio.toArray = toArray = function(c, cb) {
    var a, ctx, i, imgd, px, _ref;
    a = [];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    if (Uint8Array) {
      a = new Uint8Array(new ArrayBuffer(px.length));
    }
    i = 0;
    while (i < px.length) {
      a[i] = px[i];
      i = i + 1;
    }
    return a;
  };

  Canio.resize = resize = function() {
    var c, cb, first, max, min, new_c, new_ctx, p, r, second, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    max = {
      width: null,
      height: null
    };
    min = {
      width: null,
      height: null
    };
    _ref = fff(p, 800, null, null, null, null, null), cb = _ref[0], max['width'] = _ref[1], max['height'] = _ref[2], min['width'] = _ref[3], min['height'] = _ref[4], first = _ref[5];
    second = null;
    r = {
      width: null,
      height: null
    };
    if (first === 'width') {
      second = 'height';
    } else if (first === 'height') {
      second = 'width';
    } else {
      if (c.height > c.width) {
        first = 'height';
        second = 'width';
        dlog('hochformat');
      } else {
        dlog('height' + c.height);
        dlog('width' + c.width);
        first = 'width';
        second = 'height';
        dlog('querformat');
      }
    }
    console.log('hallo');
    dlog('first: ' + first);
    dlog('second: ' + second);
    dlog(c[first]);
    if (max[first] && (c[first] > max[first] || c[second] > max[second])) {
      dlog('a');
      r[second] = c[second] * max[first] / c[first];
      r[first] = max[first];
      if (r[second] > max[second]) {
        dlog('b');
        r[first] = c[first] * max[second] / c[second];
        r[second] = max[second];
      }
    } else if (min[first] && (c[first] < min[first] || c[second] > min[second])) {
      dlog('c');
      r[first] = c[first] * min[second] / c[second];
      r[second] = min[second];
      if (r[first] < min[first]) {
        dlog('d');
        r[second] = c[second] * min[first] / c[first];
        r[first] = min[first];
      }
    } else {
      dlog('e');
      r[first] = c[first];
      r[second] = c[second];
      dlog('f');
    }
    _ref1 = newToolbox(r.width, r.height, (c != null ? c.getAttribute('id') : void 0) || (c != null ? c.getAttribute('origin') : void 0)), new_c = _ref1[0], new_ctx = _ref1[1];
    new_ctx.drawImage(c, 0, 0, r.width, r.height);
    dlog('g');
    dlog(new_c);
    dlog(cb);
    return nb(cb, new_c);
  };

  Canio.scale = scale = function() {
    var c, cb, new_c, new_ctx, new_height, new_width, p, x, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1), cb = _ref[0], x = _ref[1];
    new_width = c.width * x;
    new_height = c.height * x;
    _ref1 = newToolbox(new_width, new_height, (c != null ? c.getAttribute('id') : void 0) || (c != null ? c.getAttribute('origin') : void 0)), new_c = _ref1[0], new_ctx = _ref1[1];
    new_ctx.drawImage(c, 0, 0, new_width, new_height);
    return nb(cb, new_c);
  };

  Canio.rotateRight = rotateRight = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(90 * Math.PI / 180);
    new_ctx.drawImage(c, 0, c.height * -1);
    return nb(cb, c);
  };

  Canio.rotateLeft = rotateLeft = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(-90 * Math.PI / 180);
    new_ctx.drawImage(c, c.width * -1, 0);
    return nb(cb, c);
  };

  Canio.flip = flip = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(Math.PI);
    new_ctx.drawImage(c, c.width * -1, c.height * -1);
    return nb(cb, c);
  };

  Canio.mirror = mirror = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.translate(c2.width / 2, 0);
    new_ctx.scale(-1, 1);
    new_ctx.drawImage(c, (c2.width / 2) * -1, 0);
    return nb(cb, c);
  };

  ifw = function() {
    var c, cb, ctx, image_filters_func, imgd, new_c, new_ctx, new_imgd, new_px, p, px, _ref, _ref1;
    c = arguments[0], cb = arguments[1], image_filters_func = arguments[2], p = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    _ref1 = newToolbox(c), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_px = _ref1[3];
    nb(function() {
      return new_ctx.putImageData(image_filters_func.apply(null, [imgd].concat(__slice.call(p))), 0, 0);
    });
    return nb(cb, new_c);
  };

  mF = function() {
    var defaults, image_filters_func;
    image_filters_func = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function() {
      var c, cb, defaulted_p, p;
      c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      defaulted_p = fff(p, defaults);
      cb = defaulted_p.shift();
      return ifw.apply(null, [c, cb, image_filters_func].concat(__slice.call(defaulted_p)));
    };
  };

  Canio.binarize = mF(ImageFilters.Binarize, 0.5);

  Canio.boxBlur = mF(ImageFilters.BoxBlur, 3, 3, 2);

  Canio.gaussianBlur = mF(ImageFilters.GaussianBlur, 2);

  Canio.stackBlur = mF(ImageFilters.StackBlur, 6);

  Canio.brightness = mF(ImageFilters.brightness, 1);

  Canio.brightnessConstrastGimp = mF(ImageFilters.BrightnessContrastGimp, 1, 1);

  Canio.brightnessConstrastPhotoshop = mF(ImageFilters.BrightnessContrastPhotoshop, 1, 1);

  Canio.Channels = function(channel_string) {
    var channel;
    if (channel_string === "blue" || channel_string === "b") {
      channel = 3;
    } else if (channel_string === "green" || channel_string === "g") {
      channel = 2;
    } else {
      channel = channel_string;
    }
    return mF(ImageFilters.Channels, channel);
  };

  Canio.invert = invert = mF(ImageFilters.Invert);

  Canio.mosaic = mosaic = mF(ImageFilters.Mosaic, 10);

  window.Canio = Canio;

}).call(this);
