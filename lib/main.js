// Generated by CoffeeScript 1.3.1
(function() {
  var byArray, byImage, clamp, copy, dlog, flip, getToolbox, ifw, make, mirror, nb, newToolbox, rotateLeft, rotateRight, _DEBUG_,
    __slice = [].slice;

  _DEBUG_ = true;

  dlog = function(msg) {
    if (_DEBUG_) {
      return console.log(msg);
    }
  };

  nb = function() {
    var cb, p;
    cb = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (cb) {
      window.setTimeout.apply(window, [cb, 0].concat(__slice.call(p)));
    }
    return p[0];
  };

  clamp = function(v, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 255;
    }
    return Math.min(max, Math.max(min, v));
  };

  getToolbox = function(c) {
    var ctx, img_data;
    return [ctx = c.getContext('2d'), img_data = ctx.getImageData(0, 0, c.width, c.height), img_data.data];
  };

  make = function(width, height) {
    var c, element;
    if (width == null) {
      width = 800;
    }
    if (height == null) {
      height = 600;
    }
    if (width.width && width.height) {
      element = width;
      width = element.width;
      height = element.height;
    }
    c = document.createElement('canvas');
    c.width = width;
    c.height = height;
    return c;
  };

  newToolbox = function(width, height) {
    return getToolbox(make(width, height));
  };

  copy = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    ctx.drawImage(c, 0, 0, c.width, c.height);
    return nb(cb, new_c);
  };

  byImage = function(img, cb) {
    if (img.width && img.height) {
      return copy(img, cb);
    } else {
      img.onload(function() {
        return byImage(img, cb);
      });
      return false;
    }
  };

  byArray = function(a, w, h, cb) {
    var c, ctx, i, imgd, px, _ref;
    _ref = newToolbox(w, h), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    i = 0;
    while (i < px.length) {
      cx[i] = a[i];
      i = i + 1;
    }
    ctx.putImageData(img, 0, 0);
    return nb(cb, c);
  };

  rotateRight = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(90 * Math.PI / 180);
    new_ctx.drawImage(c, 0, c.height * -1);
    return nb(cb, c);
  };

  rotateLeft = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(-90 * Math.PI / 180);
    new_ctx.drawImage(c, c.width * -1, 0);
    return nb(cb, c);
  };

  flip = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(Math.PI);
    new_ctx.drawImage(c, c.width * -1, c.height * -1);
    return nb(cb, c);
  };

  mirror = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.translate(c2.width / 2, 0);
    new_ctx.scale(-1, 1);
    new_ctx.drawImage(c, (c2.width / 2) * -1, 0);
    return nb(cb, c);
  };

  ifw = function() {
    var c, cb, ctx, image_filters_func, imgd, new_c, new_ctx, new_imgd, new_px, p, px, _ref, _ref1;
    c = arguments[0], image_filters_func = arguments[1], cb = arguments[2], p = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    _ref1 = newToolbox(c), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_px = _ref1[3];
    nb(function() {
      return new_ctx.putImageData(image_filters_func.apply(null, [imgd].concat(__slice.call(p))), 0, 0);
    });
    return nb(cb, new_c);
  };

}).call(this);
