// Generated by CoffeeScript 1.3.1
(function() {
  var Canio, byArray, byImage, cbr, clamp, copy, crop, dlog, fff, getGrayscaleValue, getToolbox, hardResize, ifw, isFunction, mF, make, nb, newToolbox, resize, rgba, scale, toArray, toImage, _DEBUG_,
    __slice = [].slice;

  Canio = {};

  Canio._DEBUG_ = _DEBUG_ = true;

  dlog = function(msg) {
    if (_DEBUG_) {
      return console.log(msg);
    }
  };

  cbr = function(cb, function_name) {
    var _results;
    _results = [];
    while (!cb) {
      throw new Error('Callback required for ' + function_name);
    }
    return _results;
  };

  isFunction = function(functionToCheck) {
    var getType;
    getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
  };

  nb = function() {
    var cb, p;
    cb = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (cb && isFunction(cb)) {
      window.setTimeout.apply(window, [cb, 0].concat(__slice.call(p)));
    }
    return p != null ? p[0] : void 0;
  };

  fff = function() {
    var d, defaults, first_func, i, p2, par, params, _fn, _fn1, _i, _j, _len, _len1;
    params = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    first_func = null;
    p2 = [];
    i = 0;
    _fn = function(par) {
      if (isFunction(par) && !first_func) {
        return first_func = par;
      } else {
        return p2.push(par);
      }
    };
    for (_i = 0, _len = params.length; _i < _len; _i++) {
      par = params[_i];
      _fn(par);
    }
    _fn1 = function(d) {
      var _ref;
      return (_ref = p2[i]) != null ? _ref : p2[i] = d;
    };
    for (i = _j = 0, _len1 = defaults.length; _j < _len1; i = ++_j) {
      d = defaults[i];
      _fn1(d);
    }
    if (!first_func) {
      first_func = function(c) {
        return null;
      };
    }
    p2.unshift(first_func);
    return p2;
  };

  clamp = function(v, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 255;
    }
    return Math.min(max, Math.max(min, v));
  };

  Canio.getToolbox = getToolbox = function(c, cb) {
    var ctx, img_data;
    return nb(cb, [c, ctx = c.getContext('2d'), img_data = ctx.getImageData(0, 0, c.width, c.height), img_data.data]);
  };

  Canio.make = make = function() {
    var c, cb, element, height, origin, p, width, _ref;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ref = fff(p, 800, 600), cb = _ref[0], width = _ref[1], height = _ref[2], origin = _ref[3];
    if (width.width && width.height) {
      element = width;
      width = element.width;
      height = element.height;
      origin = (element != null ? typeof element.getAttribute === "function" ? element.getAttribute('id') : void 0 : void 0) || (element != null ? typeof element.getAttribute === "function" ? element.getAttribute('origin') : void 0 : void 0);
    }
    c = document.createElement('canvas');
    c.width = width;
    c.height = height;
    if (origin) {
      c.setAttribute('origin', origin);
    }
    return nb(cb, c);
  };

  Canio.newToolbox = newToolbox = function() {
    var cb, height, origin, p, width, _ref;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ref = fff(p), cb = _ref[0], width = _ref[1], height = _ref[2], origin = _ref[3];
    return Canio.getToolbox(make(width, height, origin), cb);
  };

  Canio.copy = copy = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.drawImage(c, 0, 0, c.width, c.height);
    return nb(cb, new_c);
  };

  Canio.byImage = byImage = function(img, cb) {
    if (img.width && img.height) {
      return copy(img, cb);
    } else {
      cbr(cb, 'Canio.byImage (only if the image is not "loaded")');
      if (isFunction(cb)) {
        img.onload = function() {
          return Canio.byImage(img, cb);
        };
      }
      return true;
    }
  };

  Canio.byArray = byArray = function(a, w, h, cb) {
    var c, ctx, i, imgd, pxs, _ref;
    _ref = newToolbox(w, h), c = _ref[0], ctx = _ref[1], imgd = _ref[2], pxs = _ref[3];
    i = 0;
    while (i < pxs.length) {
      pxs[i] = a[i];
      i = i + 1;
    }
    ctx.putImageData(imgd, 0, 0);
    return nb(cb, c);
  };

  Canio.toImage = toImage = function() {
    var c, cb, img, mime, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 'image/png'), cb = _ref[0], mime = _ref[1];
    img = new Image();
    img.src = c.toDataURL(mime, "");
    return nb(cb, img);
  };

  Canio.toArray = toArray = function(c, cb) {
    var a, ctx, i, imgd, px, _ref;
    a = [];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    if (Uint8Array) {
      a = new Uint8Array(new ArrayBuffer(px.length));
    }
    i = 0;
    while (i < px.length) {
      a[i] = px[i];
      i = i + 1;
    }
    return a;
  };

  Canio.hardResize = hardResize = function(c, w, h, cb) {
    var new_c, new_ctx, _ref;
    _ref = Canio.newToolbox(w, h), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.drawImage(c, 0, 0, w, h);
    return nb(cb, new_c);
  };

  Canio.resize = resize = function() {
    var c, cb, first, max, min, new_c, new_ctx, p, r, second, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    max = {
      width: null,
      height: null
    };
    min = {
      width: null,
      height: null
    };
    _ref = fff(p, 800, null, null, null, null, null), cb = _ref[0], max['width'] = _ref[1], max['height'] = _ref[2], min['width'] = _ref[3], min['height'] = _ref[4], first = _ref[5];
    second = null;
    r = {
      width: null,
      height: null
    };
    if (first === 'width') {
      second = 'height';
    } else if (first === 'height') {
      second = 'width';
    } else {
      if (c.height > c.width) {
        first = 'height';
        second = 'width';
      } else {
        first = 'width';
        second = 'height';
      }
    }
    console.log('hallo');
    if (max[first] && (c[first] > max[first] || c[second] > max[second])) {
      r[second] = c[second] * max[first] / c[first];
      r[first] = max[first];
      if (r[second] > max[second]) {
        r[first] = c[first] * max[second] / c[second];
        r[second] = max[second];
      }
    } else if (min[first] && (c[first] < min[first] || c[second] > min[second])) {
      r[first] = c[first] * min[second] / c[second];
      r[second] = min[second];
      if (r[first] < min[first]) {
        r[second] = c[second] * min[first] / c[first];
        r[first] = min[first];
      }
    } else {
      r[first] = c[first];
      r[second] = c[second];
    }
    _ref1 = newToolbox(r.width, r.height, (c != null ? c.getAttribute('id') : void 0) || (c != null ? c.getAttribute('origin') : void 0)), new_c = _ref1[0], new_ctx = _ref1[1];
    new_ctx.drawImage(c, 0, 0, r.width, r.height);
    return nb(cb, new_c);
  };

  Canio.scale = scale = function() {
    var c, cb, new_c, new_ctx, new_height, new_width, p, x, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1), cb = _ref[0], x = _ref[1];
    new_width = c.width * x;
    new_height = c.height * x;
    _ref1 = newToolbox(new_width, new_height, (c != null ? c.getAttribute('id') : void 0) || (c != null ? c.getAttribute('origin') : void 0)), new_c = _ref1[0], new_ctx = _ref1[1];
    new_ctx.drawImage(c, 0, 0, new_width, new_height);
    return nb(cb, new_c);
  };

  Canio.crop = crop = function() {
    var c, cb, crop_height, crop_width, crop_x, crop_y, new_c, new_ctx, p, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0, 0, c.width / 2, c.height / 2), cb = _ref[0], crop_x = _ref[1], crop_y = _ref[2], crop_width = _ref[3], crop_height = _ref[4];
    _ref1 = newToolbox(crop_width, crop_height, (c != null ? c.getAttribute('id') : void 0) || (c != null ? c.getAttribute('origin') : void 0)), new_c = _ref1[0], new_ctx = _ref1[1];
    new_ctx.drawImage(c, crop_x, crop_y, crop_width, crop_height, 0, 0, crop_width, crop_height);
    return nb(cb, new_c);
  };

  Canio.rgba = rgba = function() {
    var a, b, c, cb, ctx, extended, filter, g, h, i, imgd, new_c, p, pxs, r, u8, w, x, y, yw, _ref, _ref1, _ref2, _ref3, _ref4;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null, false), cb = _ref[0], filter = _ref[1], extended = _ref[2];
    if (!isFunction(filter)) {
      return false;
    }
    _ref1 = getToolbox(c), c = _ref1[0], ctx = _ref1[1], imgd = _ref1[2], pxs = _ref1[3];
    _ref2 = [c.width, c.height], w = _ref2[0], h = _ref2[1];
    u8 = new Uint8Array(new ArrayBuffer(pxs.length));
    y = 0;
    while (y < h) {
      x = 0;
      yw = y * w;
      while (x < w) {
        i = (yw + x) * 4;
        r = i;
        g = i + 1;
        b = i + 2;
        a = i + 3;
        if (!extended) {
          _ref3 = filter(pxs[r], pxs[g], pxs[b], pxs[a], i), u8[r] = _ref3[0], u8[g] = _ref3[1], u8[b] = _ref3[2], u8[a] = _ref3[3];
        } else {
          _ref4 = filter(pxs[r], pxs[g], pxs[b], pxs[a], i, c), u8[r] = _ref4[0], u8[g] = _ref4[1], u8[b] = _ref4[2], u8[a] = _ref4[3];
        }
        x = x + 1;
      }
      y = y + 1;
    }
    new_c = Canio.byArray(u8, w, h);
    return nb(cb, new_c);
  };

  Canio.rotateRight = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(90 * Math.PI / 180);
    new_ctx.drawImage(c, 0, c.height * -1);
    return nb(cb, c);
  };

  Canio.rotateLeft = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(-90 * Math.PI / 180);
    new_ctx.drawImage(c, c.width * -1, 0);
    return nb(cb, c);
  };

  Canio.flip = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.rotate(Math.PI);
    new_ctx.drawImage(c, c.width * -1, c.height * -1);
    return nb(cb, c);
  };

  Canio.mirror = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.translate(c2.width / 2, 0);
    new_ctx.scale(-1, 1);
    new_ctx.drawImage(c, (c2.width / 2) * -1, 0);
    return nb(cb, c);
  };

  Canio.noise = function() {
    var amount, c, cb, dblHlp, i, k, new_c, new_ctx, new_imgd, new_pxs, noise, p, px, _i, _len, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 20), cb = _ref[0], amount = _ref[1];
    _ref1 = getToolbox(copy(c)), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_pxs = _ref1[3];
    for (i = _i = 0, _len = new_pxs.length; _i < _len; i = ++_i) {
      px = new_pxs[i];
      noise = Math.round(amount - Math.random() * amount / 2);
      dblHlp = 0;
      k = 0;
      while (k < 3) {
        new_pxs[i + k] = clamp(noise + new_pxs[i + k]);
        k = k + 1;
      }
    }
    new_ctx.putImageData(new_imgd, 0, 0);
    return nb(cb, new_c);
  };

  Canio.vignette = function() {
    var black, c, cb, gradient, new_c, new_ctx, new_imgd, new_pxs, outerRadius, p, white, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0.2, 0.8), cb = _ref[0], white = _ref[1], black = _ref[2];
    _ref1 = getToolbox(copy(c)), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_pxs = _ref1[3];
    outerRadius = Math.sqrt(Math.pow(new_c.width / 2, 2) + Math.pow(new_c.height / 2, 2));
    new_ctx.globalCompositeOperation = 'source-over';
    gradient = new_ctx.createRadialGradient(new_c.width / 2, new_c.height / 2, 0, new_c.width / 2, new_c.height / 2, outerRadius);
    gradient.addColorStop(0, 'rgba(0,0,0,0)');
    gradient.addColorStop(0.65, 'rgba(0,0,0,0)');
    gradient.addColorStop(1, 'rgba(0,0,0,' + black + ')');
    new_ctx.fillStyle = gradient;
    new_ctx.fillRect(0, 0, new_c.width, new_c.height);
    new_ctx.globalCompositeOperation = 'lighter';
    gradient = new_ctx.createRadialGradient(new_c.width / 2, new_c.height / 2, 0, new_c.width / 2, new_c.height / 2, outerRadius);
    gradient.addColorStop(0, 'rgba(255,255,255,' + white + ')');
    gradient.addColorStop(0.65, 'rgba(255,255,255,0)');
    gradient.addColorStop(1, 'rgba(0,0,0,0)');
    new_ctx.fillStyle = gradient;
    new_ctx.fillRect(0, 0, new_c.width, new_c.height);
    return nb(cb, new_c);
  };

  Canio.saturate = function() {
    var c, cb, filter, p, t, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0.3), cb = _ref[0], t = _ref[1];
    filter = function(r, g, b, a) {
      var average;
      average = (r + g + b) / 3;
      return [clamp(average + t * (r - average)), clamp(average + t * (g - average)), clamp(average + t * (b - average)), a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.desaturate = function() {
    var c, cb, p, t, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0.7), cb = _ref[0], t = _ref[1];
    return Canio.saturate(c, 1 - t, cb);
  };

  Canio.merge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Canio.getToolbox(Canio.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      var blue, green, red;
      red = clamp((r * p_pxs[i]) / 255);
      green = clamp((g * p_pxs[i + 1]) / 255);
      blue = clamp((b * p_pxs[i + 2]) / 255);
      return [red, green, blue, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.hardmerge = function() {
    var c, cb, mode, new_c, new_ctx, new_imgd, new_pxs, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1, _ref2;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null, 'source-over'), cb = _ref[0], picture = _ref[1], mode = _ref[2];
    _ref1 = Canio.getToolbox(copy(c)), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_pxs = _ref1[3];
    _ref2 = Canio.getToolbox(Canio.hardResize(picture, c.width, c.height)), p_c = _ref2[0], p_ctx = _ref2[1], p_imgd = _ref2[2], p_pxs = _ref2[3];
    new_ctx.globalCompositeOperation = mode;
    new_ctx.drawImage(p_c, 0, 0);
    return nb(cb, new_c);
  };

  Canio.negmerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Canio.getToolbox(Canio.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      var blue, green, red;
      red = clamp((r / p_pxs[i]) * 255);
      green = clamp((g / p_pxs[i + 1]) * 255);
      blue = clamp((b / p_pxs[i + 2]) * 255);
      return [red, green, blue, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.lightmerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Canio.getToolbox(Canio.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      r = (r > p_pxs[i] ? r : p_pxs[i]);
      g = (g > p_pxs[i + 1] ? g : p_pxs[i + 1]);
      b = (b > p_pxs[i + 2] ? b : p_pxs[i + 2]);
      return [r, g, b, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.darkmerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Canio.getToolbox(Canio.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      r = (r < p_pxs[i] ? r : p_pxs[i]);
      g = (g < p_pxs[i + 1] ? g : p_pxs[i + 1]);
      b = (b < p_pxs[i + 2] ? b : p_pxs[i + 2]);
      return [r, g, b, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  getGrayscaleValue = function(r, g, b) {
    return r * 0.3 + g * 0.59 + b * 0.11;
  };

  Canio.lightermerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Canio.getToolbox(Canio.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      var lighter;
      lighter = (getGrayscaleValue(r, g, b) > getGrayscaleValue(p_pxs[i], p_pxs[i + 1], p_pxs[i + 2]) ? true : false);
      r = (lighter ? r : p_pxs[i]);
      g = (lighter ? g : p_pxs[i + 1]);
      b = (lighter ? b : p_pxs[i + 2]);
      return [r, g, b, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.darkermerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Canio.getToolbox(Canio.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      var darker;
      darker = (getGrayscaleValue(r, g, b) < getGrayscaleValue(p_pxs[i], p_pxs[i + 1], p_pxs[i + 2]) ? true : false);
      r = (darker ? r : p_pxs[i]);
      g = (darker ? g : p_pxs[i + 1]);
      b = (darker ? b : p_pxs[i + 2]);
      return [r, g, b, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.blend = function() {
    var amount, c, cb, filter, neg_amount, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null, 0.5), cb = _ref[0], picture = _ref[1], amount = _ref[2];
    while (!picture) {
      return false;
    }
    _ref1 = Canio.getToolbox(Canio.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    neg_amount = 1 - amount;
    filter = function(r, g, b, a, i) {
      var blue, green, red;
      red = clamp((r * neg_amount) + (p_pxs[i] * amount));
      green = clamp((g * neg_amount) + (p_pxs[i + 1] * amount));
      blue = clamp((b * neg_amount) + (p_pxs[i + 2] * amount));
      return [red, green, blue, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.viewfinder = function(c, cb) {
    var pic;
    cbr(cb, 'Canio.viewfinder');
    pic = new Image();
    pic.onload = function() {
      return Canio.merge(c, pic, cb);
    };
    pic.src = Caniodataurls.viewfinder;
    return true;
  };

  Canio.oldschool = function(c, cb) {
    var pic;
    cbr(cb, 'Canio.oldschool');
    pic = new Image();
    pic.onload = function() {
      return Canio.lightermerge(c, pic, cb);
    };
    pic.src = Caniodataurls.oldschool;
    return true;
  };

  Canio.many = function() {
    var action, actions, c, cb, p, paramA, params, _ref, _ref1, _ref2;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p), cb = _ref[0], actions = _ref[1], params = _ref[2];
    cbr(cb);
    action = (_ref1 = actions != null ? actions.shift() : void 0) != null ? _ref1 : null;
    paramA = (_ref2 = params != null ? params.shift() : void 0) != null ? _ref2 : [];
    while (!Array.isArray(paramA)) {
      paramA = [paramA];
    }
    if (actions.length > 0) {
      return action.apply(null, [c, (function(c) {
        return Canio.many(c, cb, actions, params);
      })].concat(__slice.call(paramA)));
    } else {
      return action(c, cb, paramA);
    }
  };

  Canio.fill = function() {
    var bv, c, cb, gv, p, rv, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0, 0, 0), cb = _ref[0], rv = _ref[1], gv = _ref[2], bv = _ref[3];
    return Canio.rgba(c, cb, function(r, g, b, a) {
      return [clamp(rv), clamp(gv), clamp(bv), a];
    });
  };

  Canio.rgbaAd = function() {
    var av, bv, c, cb, gv, p, rv, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0, 0, 0, 0), cb = _ref[0], rv = _ref[1], gv = _ref[2], bv = _ref[3], av = _ref[4];
    return Canio.rgba(c, cb, function(r, g, b, a) {
      return [clamp(a + rv), clamp(g + gv), clamp(b + bv), clamp(a + av)];
    });
  };

  Canio.adBrighter = function() {
    var c, cb, p, t, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0), cb = _ref[0], t = _ref[1];
    return Canio.rgbaAd(c, t, t, t, 0, cb);
  };

  Canio.adDarker = function() {
    var c, cb, p, t, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0), cb = _ref[0], t = _ref[1];
    return Canio.brighter(c, t * -1, cb);
  };

  Canio.adOpacity = function() {
    var c, cb, p, t, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0), cb = _ref[0], t = _ref[1];
    return Canio.rgbaAd(c, 0, 0, 0, t, cb);
  };

  Canio.rgbaMultiply = function() {
    var av, bv, c, cb, gv, p, rv, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1, 1, 1, 1), cb = _ref[0], rv = _ref[1], gv = _ref[2], bv = _ref[3], av = _ref[4];
    return Canio.rgba(c, cb, function(r, g, b, a) {
      return [clamp(a * av), clamp(g * gv), clamp(b * bv), clamp(a * av)];
    });
  };

  Canio.brighter = function() {
    var c, cb, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1), cb = _ref[0], p = _ref[1];
    return Canio.rgbaMultiply(c, p, p, p, 1, cb);
  };

  Canio.darker = function() {
    var c, cb, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1), cb = _ref[0], p = _ref[1];
    p = 2 - p;
    return Canio.rgbaMultiply(c, p, p, p, 1, cb);
  };

  Canio.opacity = function() {
    var c, cb, o, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1), cb = _ref[0], o = _ref[1];
    return Canio.rgbaMultiply(c, 1, 1, 1, o, cb);
  };

  Canio.threshold = function() {
    var c, cb, filter, p, t, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 128), cb = _ref[0], t = _ref[1];
    filter = function(r, g, b, a) {
      if (r > t || g > t || b > t) {
        c = 255;
      } else {
        c = 0;
      }
      return [c, c, c, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.schemer = function() {
    var aA, aV, bA, bV, c, cb, compare, filter, gA, gV, p, rA, rV, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    dlog(fff(p, 1, 2, 3, 4, 5, 6, 7, 8, [], []));
    _ref = fff(p, [], [], [], [], [], [], [], []), cb = _ref[0], rA = _ref[1], gA = _ref[2], bA = _ref[3], aA = _ref[4], rV = _ref[5], gV = _ref[6], bV = _ref[7], aV = _ref[8];
    compare = function(a, b) {
      return a - b;
    };
    rA = rA.sort(compare);
    dlog(rA);
    gA = gA.sort(compare);
    bA = bA.sort(compare);
    aA = aA.sort(compare);
    filter = function(r, g, b, a) {
      var a2, a_threshold, b2, b_threshold, g2, g_threshold, i, r2, r_threshold, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _ref3, _ref4, _ref5;
      _ref1 = [r, g, b, a], r2 = _ref1[0], g2 = _ref1[1], b2 = _ref1[2], a2 = _ref1[3];
      if (rA.length > 0) {
        for (i = _i = 0, _len = rA.length; _i < _len; i = ++_i) {
          r_threshold = rA[i];
          if (r <= r_threshold) {
            r2 = (_ref2 = rV[i]) != null ? _ref2 : r_threshold;
            break;
          }
        }
      }
      if (gA.length > 0) {
        for (i = _j = 0, _len1 = gA.length; _j < _len1; i = ++_j) {
          g_threshold = gA[i];
          if (g <= g_threshold) {
            g2 = (_ref3 = gV[i]) != null ? _ref3 : g_threshold;
            break;
          }
        }
      }
      if (bA.length > 0) {
        for (i = _k = 0, _len2 = bA.length; _k < _len2; i = ++_k) {
          b_threshold = bA[i];
          if (b <= b_threshold) {
            b2 = (_ref4 = bV[i]) != null ? _ref4 : b_threshold;
            break;
          }
        }
      }
      if (aA.length > 0) {
        for (i = _l = 0, _len3 = aA.length; _l < _len3; i = ++_l) {
          a_threshold = aA[i];
          if (a <= a_threshold) {
            a2 = (_ref5 = aV[i]) != null ? _ref5 : a_threshold;
            break;
          }
        }
      }
      return [clamp(r2), clamp(g2), clamp(b2), clamp(a2)];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.reduceAndReplace = function() {
    var c, c64, cb, filter, nr_of_buckets, p, replacementA, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    c64 = "0,0,0 255,255,255 116,67,53 124,172,186 123,72,144 100,151,79 64,50,133 191,205,122 123,91,47 79,69,0 163,114,101 80,80,80 120,120,120 164,215,142 120,106,189 159,159,159".split(" ");
    _ref = fff(p, 16, c64), cb = _ref[0], nr_of_buckets = _ref[1], replacementA = _ref[2];
    filter = function(r, g, b, a) {
      var b2, brightness, bucket_nr, g2, r2, rgb, _ref1;
      brightness = (3 * r + 4 * g + b) >>> 3;
      bucket_nr = Math.floor(brightness / 256 * nr_of_buckets);
      rgb = replacementA[bucket_nr];
      _ref1 = rgb.split(','), r2 = _ref1[0], g2 = _ref1[1], b2 = _ref1[2];
      return [r2, g2, b2, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.ascii = function() {
    var ascii_string, c, cb, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return _ref = fff(p, '@GLftli;:,.  '), cb = _ref[0], ascii_string = _ref[1], _ref;
  };

  Canio.posterize = function() {
    var c, cb, filter, levels, p, step, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 5), cb = _ref[0], levels = _ref[1];
    step = Math.floor(255 / levels);
    filter = function(r, g, b, a) {
      var b2, g2, r2;
      r2 = clamp(Math.floor(r / step) * step);
      g2 = clamp(Math.floor(g / step) * step);
      b2 = clamp(Math.floor(b / step) * step);
      return [r2, g2, b2, a];
    };
    return Canio.rgby(c, cb, filter);
  };

  Canio.grayScale = function(c, cb) {
    var filter;
    filter = function(r, g, b, a) {
      var average;
      average = (r + g + b) / 3;
      return [average, average, average, a];
    };
    return doRgbaFilter(c, cb, filter);
  };

  Canio.tint = function() {
    var c, cb, filter, max_b, max_g, max_r, min_b, min_g, min_r, p, tint_max, tint_min, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    tint_min = 85;
    tint_max = 170;
    _ref = fff(p, tint_min, tint_min, tint_min, tint_max, tint_max, tint_max), cb = _ref[0], min_r = _ref[1], min_g = _ref[2], min_b = _ref[3], max_r = _ref[4], max_b = _ref[5], max_g = _ref[6];
    if (min_r === max_r) {
      max_r = max_r + 1;
    }
    if (min_g === max_g) {
      max_g = max_g + 1;
    }
    if (min_b === max_b) {
      max_b = max_b + 1;
    }
    filter = function(r, g, b, a) {
      var b2, g2, r2;
      r2 = clamp((r - min_r) * (255 / (max_r - min_r)));
      g2 = clamp((g - min_r) * (255 / (max_g - min_g)));
      b2 = clamp((b - min_b) * (255 / (max_b - min_b)));
      return [r2, g2, b2, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.sepia = function(c, cb) {
    var filter;
    filter = function(r, g, b, a) {
      var b2, g2, r2;
      r2 = (r * 0.393) + (g * 0.769) + (b * 0.189);
      g2 = (r * 0.349) + (g * 0.686) + (b * 0.168);
      b2 = (r * 0.272) + (g * 0.534) + (b * 0.131);
      return [clamp(r2), clamp(g2), clamp(b2), a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.blackWhite = function(c, cb) {
    var filter;
    filter = function(r, g, b, a) {
      var factor;
      factor = (r * 0.3) + (g * 0.59) + (b * 0.11);
      return [factor, factor, factor, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.solarize = function(c, cb) {
    var filter;
    filter = function(r, g, b, a) {
      return [(r > 127 ? 255 - r : r), (g > 127 ? 255 - g : g), (b > 127 ? 255 - b : b), a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.removeNoise = function() {
    var a, b, b1, b2, b3, c, cb, ctx, g, g1, g2, g3, h, i, iNext, iPrev, imgd, maxB, maxG, maxR, minB, minG, minR, new_c, nextX, nextY, p, prevX, prevY, pxs, r, r1, r2, r3, u8, w, x, y, yw, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    cb = fff(p)[0];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], pxs = _ref[3];
    _ref1 = [c.width, c.height], w = _ref1[0], h = _ref1[1];
    u8 = new Uint8Array(new ArrayBuffer(pxs.length));
    y = 0;
    while (y < h) {
      nextY = (y === h ? y : y + 1);
      prevY = (y === 0 ? 0 : y - 1);
      x = 0;
      yw = y * w;
      while (x < w) {
        i = (yw + x) * 4;
        nextX = (x === w ? x : x + 1);
        prevX = (x === 0 ? 0 : x - 1);
        iNext = (nextY * w + nextX) * 4;
        iPrev = (prevY * w + nextX) * 4;
        r = i;
        g = i + 1;
        b = i + 2;
        a = i + 3;
        minR = maxR = pxs[iPrev];
        r1 = pxs[r - 4];
        r2 = pxs[r + 4];
        r3 = pxs[iNext];
        if (r1 < minR) {
          minR = r1;
        }
        if (r2 < minR) {
          minR = r2;
        }
        if (r3 < minR) {
          minR = r3;
        }
        if (r1 > maxR) {
          maxR = r1;
        }
        if (r2 > maxR) {
          maxR = r2;
        }
        if (r3 > maxR) {
          maxR = r3;
        }
        minG = maxG = pxs[iPrev + 1];
        g1 = pxs[g - 4];
        g2 = pxs[g + 4];
        g3 = pxs[iNext + 1];
        if (g1 < minG) {
          minG = g1;
        }
        if (g2 < minG) {
          minG = g2;
        }
        if (g3 < minG) {
          minG = g3;
        }
        if (g1 > maxG) {
          maxG = g1;
        }
        if (g2 > maxG) {
          maxG = g2;
        }
        if (g3 > maxG) {
          maxG = g3;
        }
        minB = maxB = pxs[iPrev + 2];
        b1 = pxs[b - 4];
        b2 = pxs[b + 4];
        b3 = pxs[iNext + 2];
        if (b1 < minB) {
          minB = b1;
        }
        if (b2 < minB) {
          minB = b2;
        }
        if (b3 < minB) {
          minB = b3;
        }
        if (b1 > maxB) {
          maxB = b1;
        }
        if (b2 > maxB) {
          maxB = b2;
        }
        if (b3 > maxB) {
          maxB = b3;
        }
        if (r > maxR) {
          u8[r] = maxR;
        } else if (r < minR) {
          u8[r] = minR;
        }
        if (g > maxG) {
          u8[g] = maxG;
        } else if (g < minG) {
          u8[g] = minG;
        }
        if (b > maxB) {
          u8[b] = maxB;
        } else if (b < minB) {
          u8[b] = minB;
        }
        u8[a] = pxs[a];
        x = x + 1;
      }
      y = y + 1;
    }
    new_c = Canio.byArray(u8, w, h);
    return nb(cb, new_c);
  };

  Canio.nothing = function() {
    var c, cb, filter, p;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    cb = fff(p)[0];
    filter = function(r, g, b, a) {
      return [r, g, b, a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.curve = function() {
    var bc, c, cb, filter, gc, p, rc;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    cb = fff(p)[0];
    rc = [0, 0, 0, 1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 17, 18, 19, 19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 52, 54, 55, 57, 59, 60, 62, 65, 67, 69, 70, 72, 74, 77, 79, 81, 83, 86, 88, 90, 92, 94, 97, 99, 101, 103, 107, 109, 111, 112, 116, 118, 120, 124, 126, 127, 129, 133, 135, 136, 140, 142, 143, 145, 149, 150, 152, 155, 157, 159, 162, 163, 165, 167, 170, 171, 173, 176, 177, 178, 180, 183, 184, 185, 188, 189, 190, 192, 194, 195, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 219, 220, 221, 222, 223, 224, 225, 226, 227, 227, 228, 229, 229, 230, 231, 232, 232, 233, 234, 234, 235, 236, 236, 237, 238, 238, 239, 239, 240, 241, 241, 242, 242, 243, 244, 244, 245, 245, 245, 246, 247, 247, 248, 248, 249, 249, 249, 250, 251, 251, 252, 252, 252, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255];
    gc = [0, 0, 1, 2, 2, 3, 5, 5, 6, 7, 8, 8, 10, 11, 11, 12, 13, 15, 15, 16, 17, 18, 18, 19, 21, 22, 22, 23, 24, 26, 26, 27, 28, 29, 31, 31, 32, 33, 34, 35, 35, 37, 38, 39, 40, 41, 43, 44, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 186, 187, 188, 189, 190, 192, 193, 194, 195, 195, 196, 197, 199, 200, 201, 202, 202, 203, 204, 205, 206, 207, 208, 208, 209, 210, 211, 212, 213, 214, 214, 215, 216, 217, 218, 219, 219, 220, 221, 222, 223, 223, 224, 225, 226, 226, 227, 228, 228, 229, 230, 231, 232, 232, 232, 233, 234, 235, 235, 236, 236, 237, 238, 238, 239, 239, 240, 240, 241, 242, 242, 242, 243, 244, 245, 245, 246, 246, 247, 247, 248, 249, 249, 249, 250, 251, 251, 252, 252, 252, 253, 254, 255];
    bc = [53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 61, 61, 61, 62, 62, 63, 63, 63, 64, 65, 65, 65, 66, 66, 67, 67, 67, 68, 69, 69, 69, 70, 70, 71, 71, 72, 73, 73, 73, 74, 74, 75, 75, 76, 77, 77, 78, 78, 79, 79, 80, 81, 81, 82, 82, 83, 83, 84, 85, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 91, 93, 93, 94, 94, 95, 95, 96, 97, 98, 98, 99, 99, 100, 101, 102, 102, 103, 104, 105, 105, 106, 106, 107, 108, 109, 109, 110, 111, 111, 112, 113, 114, 114, 115, 116, 117, 117, 118, 119, 119, 121, 121, 122, 122, 123, 124, 125, 126, 126, 127, 128, 129, 129, 130, 131, 132, 132, 133, 134, 134, 135, 136, 137, 137, 138, 139, 140, 140, 141, 142, 142, 143, 144, 145, 145, 146, 146, 148, 148, 149, 149, 150, 151, 152, 152, 153, 153, 154, 155, 156, 156, 157, 157, 158, 159, 160, 160, 161, 161, 162, 162, 163, 164, 164, 165, 165, 166, 166, 167, 168, 168, 169, 169, 170, 170, 171, 172, 172, 173, 173, 174, 174, 175, 176, 176, 177, 177, 177, 178, 178, 179, 180, 180, 181, 181, 181, 182, 182, 183, 184, 184, 184, 185, 185, 186, 186, 186, 187, 188, 188, 188, 189, 189, 189, 190, 190, 191, 191, 192, 192, 193, 193, 193, 194, 194, 194, 195, 196, 196, 196, 197, 197, 197, 198, 199];
    filter = function(r, g, b, a) {
      return [rc[r], rc[g], rc[b], a];
    };
    return Canio.rgba(c, cb, filter);
  };

  Canio.screen = function() {
    var bb, c, cb, filter, gg, p, rr, strength, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 227, 12, 169, 0.2), cb = _ref[0], rr = _ref[1], gg = _ref[2], bb = _ref[3], strength = _ref[4];
    filter = function(r, g, b, a) {
      return [255 - ((255 - r) * (255 - rr * strength) / 255), 255 - ((255 - g) * (255 - gg * strength) / 255), 255 - ((255 - b) * (255 - bb * strength) / 255), a];
    };
    return Canio.rgba(c, cb, filter);
  };

  ifw = function() {
    var c, cb, ctx, image_filters_func, imgd, new_c, new_ctx, new_imgd, new_px, p, px, _ref, _ref1;
    c = arguments[0], cb = arguments[1], image_filters_func = arguments[2], p = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    _ref1 = newToolbox(c), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_px = _ref1[3];
    nb(function() {
      return new_ctx.putImageData(image_filters_func.apply(null, [imgd].concat(__slice.call(p))), 0, 0);
    });
    return nb(cb, new_c);
  };

  mF = function() {
    var defaults, image_filters_func;
    image_filters_func = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function() {
      var c, cb, defaulted_p, p;
      c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      defaulted_p = fff(p, defaults);
      cb = defaulted_p.shift();
      return ifw.apply(null, [c, cb, image_filters_func].concat(__slice.call(defaulted_p)));
    };
  };

  Canio.binarize = mF(ImageFilters.Binarize, 0.5);

  Canio.boxBlur = mF(ImageFilters.BoxBlur, 3, 3, 2);

  Canio.gaussianBlur = mF(ImageFilters.GaussianBlur, 2);

  Canio.stackBlur = mF(ImageFilters.StackBlur, 6);

  Canio.brightness = mF(ImageFilters.brightness, 1);

  Canio.brightnessConstrastGimp = mF(ImageFilters.BrightnessContrastGimp, 50, 50);

  Canio.brightnessConstrastPhotoshop = mF(ImageFilters.BrightnessContrastPhotoshop, 50, 50);

  Canio.Channels = function(channel_string) {
    var channel;
    if (channel_string === "blue" || channel_string === "b") {
      channel = 3;
    } else if (channel_string === "green" || channel_string === "g") {
      channel = 2;
    } else {
      channel = channel_string;
    }
    return mF(ImageFilters.Channels, channel);
  };

  Canio.colorTransform = mF(ImageFilters.ColorTransformFilter, 1, 1, 1, 0, 0, 0);

  Canio.dither = mF(ImageFilters.Dither, 2);

  Canio.edge = mF(ImageFilters.Edge);

  Canio.emboss = mF(ImageFilters.Emboss);

  Canio.enrich = mF(ImageFilters.Enrich);

  Canio.gamma = mF(ImageFilters.Gamma, 2);

  Canio.HSLAdjustment = mF(ImageFilters.HSLAdjustment, 0, 0, 0);

  Canio.invert = mF(ImageFilters.Invert);

  Canio.mosaic = mF(ImageFilters.Mosaic, 10);

  Canio.oil = mF(ImageFilters.Oil, 4, 30);

  Canio.sharpen = mF(ImageFilters.Sharpen, 3);

  Canio.twirl = mF(ImageFilters.Twril, 0.5, 0.5, 100, 360);

  window.Canio = Canio;

}).call(this);
